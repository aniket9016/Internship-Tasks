use assignment4
select * from Tbl_Salesman
select * from Tbl_Customer
select * from Tbl_Orders
select * from Tbl_CompanyMaster
select * from Tbl_ItemMaster
select * from Tbl_Department
select * from Tbl_EmpDetails

--Q-1. write a SQL query to find all the orders issued by the salesman 'Paul Adam'. Return ord_no, purch_amt, ord_date, customer_id 
--and salesman_id.
select ord_no,purch_amt,ord_date,customer_id,salesman_id
from Tbl_Orders
where salesman_id in(
	select salesman_id
	from Tbl_Salesman where name='Paul Adam')
--Q-2. write a SQL query to find all orders generated by London-based salespeople. Return ord_no, purch_amt, ord_date, customer_id, 
--salesman_id.
select *
from Tbl_Orders
where salesman_id in(select salesman_id from Tbl_Salesman where city='London')
--Q-3. write a SQL query to find all orders generated by the salespeople who may work for customers whose id is 3007. Return ord_no,
--purch_amt, ord_date, customer_id, salesman_id.
select *
from Tbl_Orders o
where o.salesman_id in (select s.salesman_id from Tbl_Salesman s where o.customer_id='3007')
--Q-4. write a SQL query to find the order values greater than the average order value of 10th October 2012. Return ord_no, purch_amt, 
--ord_date, customer_id, salesman_id.
select *
from Tbl_Orders where purch_amt> (select avg(purch_amt) from Tbl_Orders where ord_date='2012-10-10')
--Q-5. write a SQL query to find all the orders generated in New York city. Return ord_no, purch_amt, ord_date, customer_id and 
--salesman_id.
select *
from Tbl_Orders where salesman_id in(select salesman_id from Tbl_Salesman where city='New York');
--Q-6. write a SQL query to determine the commission of the salespeople in Paris. Return commission.
select commission
from Tbl_Salesman where city='Paris'
--Q-7. Write a query to display all the customers whose ID is 2001 below the salesperson ID of Mc Lyon.
select *
from Tbl_Customer where customer_id =3001 and salesman_id =(select salesman_id from Tbl_Salesman where name='Mc Lyon');
--Q-8. write a SQL query to count the number of customers with grades above the average in New York City. Return grade and count.
select grade,count(*) "count"
from Tbl_Customer 
where city ='New York' and grade>(select avg(grade) from Tbl_Customer where city='New York')
group by grade

--Q-9. write a SQL query to find those salespeople who earned the maximum commission. Return ord_no, purch_amt, ord_date, and salesman_id.
select ord_no, purch_amt, ord_date,salesman_id
from Tbl_Orders
where salesman_id=(
					select salesman_id from Tbl_Salesman where commission=(
																			select max(commission) from Tbl_Salesman ))
--Q-10. write SQL query to find the customers who placed orders on 17th August 2012. Return ord_no, purch_amt, ord_date, customer_id,
--salesman_id and cust_name.
select o.ord_no,o.purch_amt,o.ord_date,o.customer_id,o.salesman_id,c.cust_name
from Tbl_Orders o 
join Tbl_Customer c on c.customer_id=o.customer_id
where ord_date='2012-08-17'
--Q-11. write a SQL query to find salespeople who had more than one customer. Return salesman_id and name.
select salesman_id,name from Tbl_Salesman where salesman_id in (select salesman_id from Tbl_Customer group by(salesman_id) 
having count(salesman_id)>1 )

select c.salesman_id,s.name
from Tbl_Customer c
join Tbl_Salesman s on s.salesman_id=c.salesman_id
group by c.salesman_id,s.name
having count(c.salesman_id)>1
--Q-12. write a SQL query to find those orders, which are higher than the average amount of the orders. Return ord_no, purch_amt, 
--ord_date, customer_id and salesman_id.
select ord_no,purch_amt,ord_date,customer_id,salesman_id
from Tbl_Orders where purch_amt>(select avg(purch_amt) from Tbl_Orders)
--Q-13. write a SQL query to find those orders that are equal or higher than the average amount of the orders. Return ord_no, 
--purch_amt, ord_date, customer_id and salesman_id.
select ord_no,purch_amt,ord_date,customer_id,salesman_id
from Tbl_Orders where purch_amt>=(select avg(purch_amt) from Tbl_Orders)
--Q-14. Write a query to find the sums of the amounts from the orders table, grouped by date, and eliminate all dates where the 
--sum was not at least 1000.00 above the maximum order amount for that date.
select o1.ord_date,sum(o1.purch_amt) "Sum"
from Tbl_Orders o1
group by o1.ord_date 
having sum(o1.purch_amt) >(select max(o2.purch_amt)+1000 from Tbl_Orders o2 where o1.ord_date=o2.ord_date)
--Q-15. Write a query to extract all data from the customer table if and only if one or more of the customers in the customer table 
--are located in London.
SELECT * 
FROM Tbl_Customer
WHERE EXISTS (
    SELECT * 
    FROM Tbl_Customer 
    WHERE city = 'London'
);
--Q-16. write a SQL query to find salespeople who deal with multiple customers. Return salesman_id, name, city and commission.
select *
from Tbl_Salesman where salesman_id in(select salesman_id from Tbl_Customer group by salesman_id having count(salesman_id)>1)
--Q-17. write a SQL query to find salespeople who deal with a single customer. Return salesman_id, name, city and commission.
select *
from Tbl_Salesman where salesman_id in(select salesman_id from Tbl_Customer group by salesman_id having count(salesman_id)=1)
--Q-18. write a SQL query to find the salespeople who deal the customers with more than one order. Return salesman_id, name, city 
--and commission.
select *
from Tbl_Salesman 
where salesman_id in(
					select c.salesman_id 
					from Tbl_Customer c
					join Tbl_Orders o on o.customer_id=c.customer_id
					group by c.customer_id,c.salesman_id
					having count(c.customer_id)>1)
--Q-19. write a SQL query to find the salespeople who deal with those customers who live in the same city. Return salesman_id, name, 
--city and commission.
select *
from Tbl_Salesman
where salesman_id in(select salesman_id from Tbl_Customer where Tbl_Salesman.city=Tbl_Customer.city)

--Q-20. write a SQL query to find salespeople whose place of residence matches any city where customers live. Return salesman_id, 
--name, city and commission.
select *
from Tbl_Salesman
where city in(
			select 
			distinct city 
			from Tbl_Customer )
--Q-21. write a SQL query to find all those salespeople whose names appear alphabetically after the customer’s name. Return salesman_id,
--name, city, commission.
select *
from Tbl_Salesman
where Tbl_Salesman.name >all(
			select 
			cust_name
			from Tbl_Customer
			where Tbl_Salesman.salesman_id=Tbl_Customer.salesman_id)
--Q-22. write a SQL query to find all those customers with a higher grade than all the customers alphabetically below the city of New 
--York. Return customer_id, cust_name, city, grade, salesman_id.
select *
from Tbl_Customer
where grade>any(select grade from Tbl_Customer where city<'New York')


--Q-23. write a SQL query to find all those orders whose order amount exceeds at least one of the orders placed on September 10th 2012.
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select *
from Tbl_Orders 
where purch_amt>(select min(purch_amt) from Tbl_Orders where ord_date='2012-09-10')
--Q-24. write a SQL query to find orders where the order amount is less than the order amount of a customer residing in London City. 
--Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select o.ord_no,o.purch_amt,o.ord_date,o.customer_id,o.salesman_id
from Tbl_Orders o
where purch_amt>(
				select max(o.purch_amt)
				from Tbl_Orders o
				join Tbl_Customer c on c.customer_id=o.customer_id
				where c.city='London')
--Q-25. write a SQL query to find those orders where every order amount is less than the maximum order amount of a customer who lives 
--in London City. Return ord_no, purch_amt, ord_date, customer_id and salesman_id.
select o.ord_no,o.purch_amt,o.ord_date,o.customer_id,o.salesman_id
from Tbl_Orders o
where purch_amt<(
				select max(o.purch_amt)
				from Tbl_Orders o
				join Tbl_Customer c on c.customer_id=o.customer_id
				where c.city='London')
--Q-26. write a SQL query to find those customers whose grades are higher than those living in New York City. Return customer_id, 
--cust_name, city, grade and salesman_id.
select *
from Tbl_Customer
where grade>(select max(grade) from Tbl_Customer where city='New York')

--Q-27. write a SQL query to calculate the total order amount generated by a salesperson. Salespersons should be from the cities 
--where the customers reside. Return salesperson name, city and total order amount.
use assignment4
SELECT s.name "salesperson name", s.city, (
  SELECT SUM(o.purch_amt)
  FROM Tbl_Orders o
  JOIN Tbl_Customer c ON o.customer_id = c.customer_id
  WHERE c.salesman_id = s.salesman_id AND c.city = s.city
) "total order amount"
FROM Tbl_Salesman s

--Q-28. write a SQL query to find those customers whose grades are not the same as those who live in London City. Return customer_id,
--cust_name, city, grade and salesman_id.
select *
from Tbl_Customer
where grade not in(
				select grade from Tbl_Customer where city='London')
--Q-29. write a SQL query to find those customers whose grades are different from those living in Paris. Return customer_id, cust_name,
--city, grade and salesman_id.
select *
from Tbl_Customer
where grade not in(
				select grade from Tbl_Customer where city='Paris')
--Q-30. write a SQL query to find all those customers who have different grades than any customer who lives in Dallas City. 
--Return customer_id, cust_name,city, grade and salesman_id.
select *
from Tbl_Customer
where grade not in(
				select grade from Tbl_Customer where city='Dallas')
--Q-31. write a SQL query to calculate the average price of each manufacturer's product along with their name. Return Average Price
--and Company.
select c.COM_NAME as Company,(
							select avg(i.PRO_PRICE)
							from Tbl_ItemMaster i
							WHERE i.PRO_COM=c.COM_ID) "Average price"
from Tbl_CompanyMaster c

--Q-32. write a SQL query to calculate the average price of each manufacturer's product of 350 or more. Return Average Price and Company.
select c.COM_NAME as Company,(
							select avg(i.PRO_PRICE)
							from Tbl_ItemMaster i
							WHERE i.PRO_COM=c.COM_ID and i.PRO_PRICE>350) "Average_price"
from Tbl_CompanyMaster c
--Q-33. write a SQL query to find the most expensive product of each company. Return Product Name, Price and Company
select i.PRO_NAME,i.PRO_PRICE,c.COM_NAME
from Tbl_ItemMaster i
join Tbl_CompanyMaster c on i.PRO_COM=c.COM_ID
where PRO_PRICE=(select max(i.PRO_PRICE)
				from Tbl_ItemMaster i
				where i.PRO_COM=c.COM_ID)

--Q-34. write a SQL query to find employees whose last name is Gabriel or Dosio. Return emp_idno, emp_fname, emp_lname and emp_dept.
select *
from Tbl_EmpDetails
where EMP_LNAME='Gabriel' or EMP_LNAME='Dosio'

--Q-35. write a SQL query to find the employees who work in department 89 or 63. Return emp_idno, emp_fname, emp_lname and emp_dept.
select *
from Tbl_EmpDetails
where EMP_DEPT=89 or EMP_DEPT=63
--Q-36. write a SQL query to find those employees who work for the department where the departmental allotment amount is more than 
--Rs. 50000. Return emp_fname and emp_lname.
select *
from Tbl_EmpDetails
where EMP_DEPT in(select DPT_CODE from Tbl_Department where DPT_ALLOTMENT>50000)
--Q-37. write a SQL query to find the departments whose sanction amount is higher than the average sanction amount for all 
--departments. Return dpt_code, dpt_name and dpt_allotment.
select *
from Tbl_Department
where DPT_ALLOTMENT >(select avg(DPT_ALLOTMENT) from Tbl_Department)
--Q-38. write a SQL query to find which departments have more than two employees. Return dpt_name.
select DPT_NAME
from Tbl_Department
where DPT_CODE in(select EMP_DEPT
				from Tbl_EmpDetails
				group by EMP_DEPT
				having count(EMP_DEPT)>2)
--Q-39. write a SQL query to find the departments with the second lowest sanction amount. Return emp_fname and emp_lname.
select EMP_FNAME,EMP_LNAME
from Tbl_EmpDetails
where EMP_DEPT in(select DPT_CODE
					from Tbl_Department 
					order by DPT_ALLOTMENT
					offset 1 rows fetch next 1 rows only)